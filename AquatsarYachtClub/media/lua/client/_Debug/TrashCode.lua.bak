
-- function test1(paramIsoObject)
    -- print("OnObjectAboutToBeRemoved:, ", isWater(paramIsoObject))
-- end
-- a = 0 
-- waterBase = {}
-- function test0(paramIsoObject)
    -- if isWater(paramIsoObject) and a == 0 then
        -- local foor = ISWaterFloor:new("blends_natural_02_5")
        -- local sq = paramIsoObject:getSquare()
        -- foor:create(sq:getX(), sq:getY(), 0, false, "blends_natural_02_5")
        -- print("OnTileRemoved: ", paramIsoObject:getTile())
        -- -- local sq = paramIsoObject:getSquare()
        -- -- if sq then
            -- -- for i=0, sq:getObjects():size()-1 do
                -- -- local object = sq:getObjects():get(i);
                -- -- print(object)
                -- -- if object:getProperties() and not isWater(object) then
                    -- -- sq:RemoveTileObject(object);
                -- -- end
            -- -- end
            -- -- sq:getObjects():add(paramIsoObject);
            -- -- sq:RecalcProperties();
        -- -- end
        -- a = a + 1
    -- end
-- end
-- function test1(paramIsoObject)
    -- print("OnObjectAboutToBeRemoved:, ", isWater(paramIsoObject))
-- end

waterBase = nil
function test2(paramIsoObject)
    print(paramIsoObject)
    if isWater(paramIsoObject) then
        local floorTile = paramIsoObject:getTile()
        local sq = paramIsoObject:getSquare()
        if not waterBase then waterBase  = {} end
        waterBase[sq] = floorTile
    end
end

function contronBase()
    if waterBase then 
        print("waterBase")
        -- for sq, floorTile in pairs(waterBase) do 
            -- print(sq)
            -- local foor = ISWaterFloor:new(floorTile)
            -- foor:create(sq:getX(), sq:getY(), 0, false, floorTile)
        -- end
        for sqr, floorTile in pairs(waterBase) do 
            sq = getSquare(sqr:getX(), sqr:getY(), sqr:getZ())
            sq:addFloor(floorTile);
            -- for i=0, sq:getObjects():size()-1 do
                -- local object = sq:getObjects():get(i);
                -- print(object)
                -- if object:getProperties() and object:getProperties():Is(IsoFlagType.canBeRemoved) then
                    -- sq:transmitRemoveItemFromSquare(object)
                    -- sq:RemoveTileObject(object);
                -- end
            -- end
            sq:RecalcProperties()
        end
        -- for sqr, floorTile in pairs(waterBase) do 
            -- sq = getSquare(sqr:getX(), sqr:getY(), 0)
            -- for i = sq:getObjects():size(),2,-1 do
                -- local destroy = sq:getObjects():get(i-1)
                -- sq:transmitRemoveItemFromSquare(destroy)
            -- end    
            -- sq:addFloor(floorTile);
                -- -- sq:RemoveTileObject(object);
        -- end
        waterBase = nil
    end
end

-- local function click(tile, x, y)
    -- print(tile, " ", x, " ", y)

    -- -- local square = tile:getSquare()
    -- -- if not square then return {} end
    -- -- local objects = {}
    -- -- for i = square:getObjects():size(),2,-1 do
        -- -- local destroy = square:getObjects():get(i-1)
        -- -- sq:transmitRemoveItemFromSquare(destroy)
        -- -- --sq:RemoveTileObject(object);
    -- -- end
    
    -- -- print(sq:getX(), " " , sq:getY(), " " , sq:getZ())
    -- -- for i=0, sq:getObjects():size()-1 do
        -- -- local object = sq:getObjects():get(i);
        -- -- print(object)
        -- -- sq:transmitRemoveItemFromSquare(object)
        -- -- sq:RemoveTileObject(object);
    -- -- end
    
    -- -- for i=0, sq:getSpecialObjects():size()-1 do
        -- -- local object = sq:getSpecialObjects():get(i);
        -- -- print("getSpecialObjects ", object)
    -- -- end
    -- -- for i=0, sq:getWorldObjects():size()-1 do
        -- -- local object = sq:getWorldObjects():get(i);
        -- -- print("getWorldObjects ", object)
    -- -- end
-- end

-- Events.OnObjectAboutToBeRemoved.Add(test1)
Events.OnTileRemoved.Add(test2)
Events.OnTick.Add(contronBase)
-- Events.OnObjectRightMouseButtonDown.Add(click)



